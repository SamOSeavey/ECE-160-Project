#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_EVENTS 100
#define DESC_LENGTH 100
#define FILE_NAME "events.dat"

typedef struct { // "typedef_struct" works as a define tool for multiple integers
    int day;
    int month;
    int year;
    char description[DESC_LENGTH];
} Event;

void loadEvents(Event events[], int* eventCount) { /* Loads Events already Stored on File */
    FILE* file = fopen(FILE_NAME, "rb");
    if (file == NULL) {
        printf("No existing events found.\n");
        return;
    }

    while (fread(&events[*eventCount], sizeof(Event), 1, file)) { //Increases the number of events that are currently stored in the file
        (*eventCount)++;
    }
    fclose(file);
}

void saveEvents(Event events[], int eventCount) {   // Stores the Events on a File
    FILE* file = fopen(FILE_NAME, "wb");
    if (file == NULL) {
        printf("Error opening file for saving events.\n");
        return;
    }

    fwrite(events, sizeof(Event), eventCount, file);
    fclose(file);
}

void addEvent(Event events[], int* eventCount) { // This function won't allow you to add any more events once the limit is reached
    if (*eventCount >= MAX_EVENTS) {
        printf("Event list is full!\n");
        return;
    }

    Event newEvent; // This function is where the Event Date, Time, and Description is typed in by the user
    printf("Enter event date (DD MM YYYY): ");
    scanf_s("%d %d %d", &newEvent.day, &newEvent.month, &newEvent.year);
    printf("Enter event time and description: ");
    getchar(); // Allows you to type in Desciption lateral to the printf prompt, also gets rid of unneccessary space after description
    fgets(newEvent.description, DESC_LENGTH, stdin); //
    newEvent.description[strcspn(newEvent.description, "\n")] = 0; // remove newline character

    events[*eventCount] = newEvent;
    (*eventCount)++;
    printf("Event added successfully!\n");
}

void viewEvents(Event events[], int eventCount) { //Lets the program tell you that no events are saved yet
    if (eventCount == 0) {
        printf("No events scheduled.\n");
        return;
    }

    printf("Scheduled Events:\n"); //This function tells the user all the information about all the events they have input
    for (int i = 0; i < eventCount; i++) {
        printf("%02d/%02d/%04d: %s\n", events[i].day, events[i].month, events[i].year, events[i].description);
    }
}

int main() {
    Event events[MAX_EVENTS];
    int eventCount = 0;

    // Load events from file on startup
    loadEvents(events, &eventCount);

    int choice; //Main Menu Options
    while (1) {
        printf("\nEvent Scheduler\n");
        printf("1. Add Event\n");
        printf("2. View Events\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf_s("%d", &choice);

        switch (choice) {
        case 1:
            addEvent(events, &eventCount);
            saveEvents(events, eventCount);  // Save events after adding
            break;
        case 2:
            viewEvents(events, eventCount);
            break;
        case 3:
            printf("Exiting...\n");
            saveEvents(events, eventCount);  // Save events before exiting
            exit(0);
        default:
            printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
} 
